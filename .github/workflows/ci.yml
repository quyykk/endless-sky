name: CI

# TODO:
# - Reduce duplicate code (Blocking: https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336)
# - Construct even more intelligent workflows
#    e.g.
#      data/* -> use "latest" build for triggering branch, only run parse and/or acceptance tests
#      source/* -> build new binary, run all tests, cache binary
#      PR opened -> upload artifact ZIPs to PR as comment, and edit/replace as new commits come in

on:
  push:
    # Run for pushes to master or a release branch, e.g. a PR was merged ...
    branches:
      - master
      - releases/v[0-9]+.[0-9]+.[0-9]+
    # ... and only when we've possibly changed how the game will function.
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - '.github/workflows/**'
    - keys.txt
    - CMakeLists.txt
    - CMakePresets.json
    - .codespell.exclude
    - vcpkg.json
    - vcpkg/
    - 'utils/test_parse.*'
    - 'utils/check_*.sh'
    - 'copyright'
  pull_request:
    # Run for any push to any pull request, if it modifies source code or game text.
    types: [opened, synchronize]
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - '.github/workflows/**'
    - keys.txt
    - CMakeLists.txt
    - CMakePresets.json
    - .codespell.exclude
    - vcpkg.json
    - vcpkg/
    - 'utils/test_parse.*'
    - 'utils/check_*.sh'
    - 'copyright'


jobs:
  # Figure out what changed, so other jobs in this file can conditionally execute.
  changed:
    uses: ./.github/workflows/compute-changes.yml


  build:
    needs: changed
    name: Build
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' || needs.changed.outputs.integration_tests == 'true' }}
    uses: ./.github/workflows/build-ci.yml


  test_parse:
    needs: [build, changed]
    name: Data Parse
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' || needs.changed.outputs.data == 'true' || needs.changed.outputs.parse_script == 'true' }}
    runs-on: windows-latest
    env:
      CONTINUOUS: EndlessSky-win64-continuous.zip
    steps:
    - uses: actions/checkout@v3
    # If no code changes occurred then we can download the latest continuous.
    - name: Download latest continuous
      if: ${{ needs.changed.outputs.game_code == 'false' && needs.changed.outputs.cmake == 'false' }}
      uses: robinraju/release-downloader@v1
      with:
        tag: continuous
        file: ${{ env.CONTINUOUS }}
    - name: Extract and prepare continuous
      if: ${{ needs.changed.outputs.game_code == 'false' && needs.changed.outputs.cmake == 'false' }}
      run: |
        Expand-Archive ${{ env.CONTINUOUS }} -DestinationPath continuous -Force
        COPY '.\continuous\EndlessSky.exe' .
        COPY '.\continuous\*.dll' .
        COPY '.\continuous\credits.txt' .
    - name: Download game binary from CI
      if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: binary-windows-latest
    - name: Move game binary from CI
      if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' }}
      run: |
        COPY '.\build\ci\EndlessSky.exe' .
        COPY '.\build\ci\*.dll' .
    - name: Parse Datafiles
      run: .\utils\test_parse.ps1 EndlessSky.exe


  spellcheck:
    needs: changed
    name: Spellcheck
    if: ${{ needs.changed.outputs.data == 'true' || needs.changed.outputs.codespell == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: codespell-project/actions-codespell@master
      with:
        builtin: clear,en-GB_to_en-US
        path: data/
        exclude_file: .codespell.exclude


  style-check:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: editorconfig-checker/action-editorconfig-checker@main
    - run: editorconfig-checker


  validate-copyright:
    needs: changed
    name: Validate Copyright
    if: ${{ needs.changed.outputs.copyright == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: python3 -m pip install --user python-debian
    - name: Validate copyright file
      run: python3 ./utils/check_copyright.py


  validate-cmake:
    needs: changed
    name: Validate CMake Project
    if: ${{ needs.changed.outputs.game_code == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Validate CMake project
      run: ./utils/check_cmake.sh
