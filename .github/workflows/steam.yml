name: Steam

on:
  push:
    branches:
      - 0.9.15-release
      - cmake
      - releases/v[0-9]+.[0-9]+.[0-9]+

jobs:
  changed:
    uses: ./.github/workflows/compute-changes.yml

  build_linux:
    name: Steam Linux
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed_outputs.cmake == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      ARTIFACT: endless-sky
    outputs:
      RT_VERSION: ${{ steps.steamrt-version.outputs.RT_VERSION }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Save Steam runtime version
      id: steamrt-version
      run: |
        STEAM_VERSION=$(curl -sSf https://repo.steampowered.com/steamrt-images-sniper/snapshots/latest-container-runtime-depot/VERSION.txt --output -)
        echo "::set-output name=RT_VERSION::$STEAM_VERSION"
    - name: Build Endless Sky
      run: docker-compose run steam-${{ matrix.arch }}
    - name: Prepare binary
      run: cp build/steam-${{ matrix.arch }}/${{ env.ARTIFACT }} .
    - name: Upload GH artifact
      uses: actions/upload-artifact@v3
      with:
        name: binary-${{ runner.os }}-${{ matrix.arch }}
        path: |
          ${{ env.ARTIFACT }}
          credits.txt


  test_linux:
    needs: build_linux
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' || needs.changed.integration_tests == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
    env:
      snapshot: latest-container-runtime-depot
      runtime: steam-container-runtime.tar.gz
      platform: com.valvesoftware.SteamRuntime.Platform-amd64,i386-sniper-runtime.tar.gz
    steps:
    - uses: actions/checkout@v3
    - name: Restore cached Steam Runtime environment
      id: cache-runtime
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.runtime }}
          ${{ env.platform }}
        key: steamrt-${{ needs.build_linux.outputs.RT_VERSION }}
    - name: Download Steam Runtime environment
      if: steps.cache-runtime.outputs.cache-hit != 'true'
      run: |
        curl -sSf https://repo.steampowered.com/steamrt-images-sniper/snapshots/${{ env.snapshot }}/${{ env.runtime }} > ${{ env.runtime }}
        curl -sSf https://repo.steampowered.com/steamrt-images-sniper/snapshots/${{ env.snapshot }}/${{ env.platform }} > ${{ env.platform }}
    - name: Extract Steam Runtime
      run: |
        tar -xf ${{ env.runtime }}
        tar -xf ${{ env.platform }} -C steam-container-runtime/depot/sniper_platform_*/
    - name: Download Endless Sky binary
      uses: actions/download-artifact@v3
      with:
        name: binary-${{ runner.os }}-x64
        path: .
    - name: Install xvfb runtime dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends libosmesa6 mesa-utils
    - name: Test executable
      run: |
        chmod +x endless-sky
        ./steam-container-runtime/depot/run-in-sniper ./endless-sky -- -v
    - name: Execute data parsing test
      run: ./steam-container-runtime/depot/run-in-sniper ./utils/test_parse.sh -- ./endless-sky
    - name: Execute integration tests
      env:
          PRINT_GLXINFO: true
      run: ./steam-container-runtime/depot/run-in-sniper ctest -- --preset linux-integration
