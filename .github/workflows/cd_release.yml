name: Release CD

on:
  release:
    types:
      - published

jobs:
  appimage_amd64:
    runs-on: ubuntu-18.04
    env:
      ARCH: x86_64
      OUTPUT: endless-sky-amd64-${{ github.event.release.tag_name }}.AppImage
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: sudo apt-get install -y --no-install-recommends libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'linux'
          configurePresetCmdString: >
            [
            '--preset', '$[env.CONFIGURE_PRESET_NAME]',
            '-DES_RELEASE=ON'
            ]
          buildPreset: 'linux-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
      - name: Run Unit Tests
        run: ./build/linux/Release/endless-sky-tests
      - name: Package Application
        run: ./utils/build_appimage.sh
      - name: Upload AppImage
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  windows_win32:
    runs-on: windows-latest
    env:
      OUTPUT: EndlessSky-win32-${{ github.event.release.tag_name }}.zip
      GCC: 12.1.0
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get MinGW
        uses: quyykk/get-winlibs-mingw@v1
        with:
          version: ${{ env.GCC }}
          arch: x86
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: ${{ env.GCC }}-x86
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'mingw32'
          configurePresetCmdString: >
            [
            '--preset', 'mingw32',
            '-DES_RELEASE=ON'
            ]
          buildPreset: 'mingw32-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
      - name: Run Unit Tests
        run: .\build\mingw32\Release\EndlessSkyTests.exe
      - name: Package Application
        run: |
          COPY .\build\mingw32\Release\EndlessSky.exe .
          COPY ".\build\mingw32\Release\*.dll" .
          7z a ${{ env.OUTPUT }} .\sounds\ .\images\ .\data\ *.dll license.txt keys.txt icon.png EndlessSky.exe credits.txt copyright changelog
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: steam-win32
          path: |
            build\mingw32\Release\EndlessSky.exe
            "build\mingw32\Release\*.dll"
      - name: Upload zip
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  windows_win64:
    runs-on: windows-latest
    env:
      OUTPUT: EndlessSky-win64-${{ github.event.release.tag_name }}.zip
      GCC: 12.1.0
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get MinGW
        uses: quyykk/get-winlibs-mingw@v1
        with:
          version: ${{ env.GCC }}
          arch: x64
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: ${{ env.GCC }}-x86
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'mingw'
          configurePresetCmdString: >
            [
            '--preset', 'mingw',
            '-DES_RELEASE=ON'
            ]
          buildPreset: 'mingw-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
      - name: Run Unit Tests
        run: .\build\mingw\Release\EndlessSkyTests.exe
      - name: Package Application
        run: |
          COPY .\build\mingw\Release\EndlessSky.exe .
          COPY ".\build\mingw\Release\*.dll" .
          7z a ${{ env.OUTPUT }} .\sounds\ .\images\ .\data\ *.dll license.txt keys.txt icon.png EndlessSky.exe credits.txt copyright changelog
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: steam-win64
          path: |
            build\mingw\Release\EndlessSky.exe
            "build\mingw\Release\*.dll"
      - name: Upload zip
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  dmg_macos:
    runs-on: macos-latest
    env:
      OUTPUT: endless-sky-macos-${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: 10.9
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'macos10.9'
          configurePresetCmdString: >
            [
            '--preset', 'macos10.9',
            '-DES_RELEASE=ON'
            ]
          buildPreset: 'macos10.9-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
      - name: Run Unit Tests
        run: ./build/macos10.9/Release/EndlessSkyTests
      - name: Package Application
        run: |
          cd build/macos10.9/Release
          mkdir ${{ env.OUTPUT }}
          cp -r EndlessSky.app ${{ env.OUTPUT }}
          ln -s /Applications ${{ env.OUTPUT }}
          hdiutil create -ov -fs HFS+ -format UDZO -imagekey zlib-level=9 -srcfolder ${{ env.OUTPUT }} ${{ github.workspace }}/${{ env.OUTPUT }}.dmg
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: steam-macos
          path: build/macos10.9/EndlessSky.app
      - name: Upload disk image
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}.dmg


  build_steam_linux:
    name: Steam Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v3
    - name: Build Endless Sky
      run: |
        cd steam
        docker-compose run endless-sky-${{ matrix.arch }}
    - name: Prepare binary
      run: cp build/steam-${{ matrix.arch }}/${{ env.ARTIFACT }} .
    - name: Upload GH artifact
      uses: actions/upload-artifact@v2
      with:
        name: steam-linux-${{ matrix.arch }}
        path: |
          ${{ env.ARTIFACT }}
          credits.txt


  deploy_steam:
    name: Deploy Steam
    needs: [build_steam_linux, windows_win32, windows_win64, dmg_macos]
    runs-on: ubuntu-latest
    # environment: steam
    env:
      data: data-depot
      linux32: steam-linux-x86
      linux64: steam-linux-x64
      win32: steam-win32
      win64: steam-win64
      macos: steam-macos
      ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v3
    - name: Download Artifacts
      uses: actions/download-artifact@v3
    - name: Prepare data
      run: |
        mkdir ${{ env.data }}
        mv -t ${{ env.data }} \
          changelog \
          copyright \
          ${{ env.linux64 }}/credits.txt \
          icon.png \
          keys.txt \
          license.txt \
          data/ \
          images/ \
          sounds/
    - name: Prepare Linux binaries
      run: |
        chmod +x ${{ env.linux32 }}/${{ env.ARTIFACT }}
        chmod +x ${{ env.linux64 }}/${{ env.ARTIFACT }}
        rm ${{ env.linux32 }}/credits.txt
    - name: Prepare MacOS bundle
      run: |
        rm -rf ${{ env.macos }}/EndlessSky.app/Contents/Resources/
        mkdir ${{ env.macos }}/EndlessSky.app/Contents/Resources
    - name: Sanity check (data)
      run: tree ${{ env.data }}
    - name: Sanity check (win32)
      run: tree ${{ env.win32 }}
    - name: Sanity check (win64)
      run: tree ${{ env.win64 }}
    - name: Sanity check (macos)
      run: tree ${{ env.macos }}
    - name: Sanity check (linux32)
      run: tree ${{ env.linux32 }}
    - name: Sanity check (linux64)
      run: tree ${{ env.linux64 }}
    # - uses: game-ci/steam-deploy@v1
    #   with:
    #     appId: 404410
    #     buildDescription: canary-${{ github.sha }}
    #     username: ${{ secrets.STEAM_DEPLOY_UN }}
    #     password: ${{ secrets.STEAM_DEPLOY_PW }}
    #     configVdf: ${{ secrets.STEAM_DEPLOY_VDF }}
    #     ssfnFileName: ${{ secrets.STEAM_DEPLOY_SSFN_NAME }}
    #     ssfnFileContents: ${{ secrets.STEAM_DEPLOY_SSFN }}
    #     rootPath: ''
    #     depot1Path: ${{ env.data }}
    #     depot3Path: ${{ env.win32 }}
    #     depot4Path: ${{ env.win64 }}
    #     depot5Path: ${{ env.macos }}
    #     depot6Path: ${{ env.linux32 }}
    #     depot7Path: ${{ env.linux64 }}
    #     releaseBranch: canary
