name: Release CD

on:
  release:
    types:
      - published

jobs:
  appimage_amd64:
    runs-on: ubuntu-18.04
    env:
      ARCH: x86_64
      OUTPUT: endless-sky-amd64-${{ github.event.release.tag_name }}.AppImage
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: sudo apt-get install -y --no-install-recommends libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev
      - name: Get Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: 'vcpkg.json'
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'linux'
          configurePresetCmdString: >
            [
            '--preset', '$[env.CONFIGURE_PRESET_NAME]',
            '-DES_VERSION_TYPE=release',
            '-DES_USE_SYSTEM_LIBRARIES=OFF'
            ]
          buildPreset: 'linux-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
          testPreset: 'linux-test'
      - name: Package Application
        run: ./utils/build_appimage.sh
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  windows_win32:
    runs-on: windows-latest
    env:
      OUTPUT: endless-sky-win32-${{ github.event.release.tag_name }}.zip
      GCC: 12.1.0
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get MinGW
        uses: quyykk/get-winlibs-mingw@v1
        with:
          version: ${{ env.GCC }}
          arch: x86
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          appendedCacheKey: ${{ env.GCC }}-x86
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'mingw32'
          configurePresetCmdString: >
            [
            '--preset', 'mingw32',
            '-DES_VERSION_TYPE=release'
            ]
          buildPreset: 'mingw32-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
          testPreset: 'mingw32-test'
      - name: Package Application
        run: |
          cmake --install build/mingw
          7z a ${{ env.OUTPUT }} "./install/mingw32/*"
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v3
        with:
          name: steam-win32-depot
          path: |
            ./install/mingw/EndlessSky.exe
            ./install/mingw/*.dll
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  windows_win64:
    runs-on: windows-latest
    env:
      OUTPUT: endless-sky-win64-${{ github.event.release.tag_name }}.zip
      GCC: 12.1.0
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get MinGW
        uses: quyykk/get-winlibs-mingw@v1
        with:
          version: ${{ env.GCC }}
          arch: x64
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          appendedCacheKey: ${{ env.GCC }}-x64
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'mingw'
          configurePresetCmdString: >
            [
            '--preset', 'mingw',
            '-DES_VERSION_TYPE=release'
            ]
          buildPreset: 'mingw-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
          testPreset: 'mingw-test'
      - name: Package Application
        run: |
          cmake --install build/mingw
          7z a ${{ env.OUTPUT }} "./install/mingw/*"
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v3
        with:
          name: steam-win64-depot
          path: |
            ./install/mingw/EndlessSky.exe
            ./install/mingw/*.dll
      - name: Upload credits.txt
        uses: actions/upload-artifact@v3
        with:
          name: credits.txt
          path:
            credits.txt
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}


  dmg_macos:
    runs-on: macos-latest
    env:
      OUTPUT: endless-sky-macos-${{ github.event.release.tag_name }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          appendedCacheKey: 10.9
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: 'macos10.9'
          configurePresetCmdString: >
            [
            '--preset', 'macos10.9',
            '-DES_VERSION_TYPE=release',
            '-DES_USE_SYSTEM_LIBRARIES=OFF'
            ]
          buildPreset: 'macos10.9-release'
          buildPresetCmdString: >
            [
            '--build', '--preset', '$[env.BUILD_PRESET_NAME]',
            '-t', 'EndlessSky',
            '-t', 'EndlessSkyTests'
            ]
          testPreset: 'macos10.9-test'
      - name: Package Application
        run: |
          cd build/macos10.9/Release
          mkdir ${{ env.OUTPUT }}
          cp -r EndlessSky.app ${{ env.OUTPUT }}
          ln -s /Applications ${{ env.OUTPUT }}
          hdiutil create -ov -fs HFS+ -format UDZO -imagekey zlib-level=9 -srcfolder ${{ env.OUTPUT }} ${{ github.workspace }}/${{ env.OUTPUT }}.dmg
      - name: Prepare Steam Depot
        run: |
          cd build/macos10.9/Release
          mv EndlessSky.app/Contents/Resources/endless-sky.icns .
          rm -rf EndlessSky.app/Contents/Resources
          mkdir EndlessSky.app/Contents/Resources
          mv endless-sky.icns EndlessSky.app/Contents/Resources
          mkdir ../../../depot
          mv EndlessSky.app/ ../../../depot
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v3
        with:
          name: steam-macos-depot
          path: depot
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.OUTPUT }}.dmg


  build_steam_linux:
    name: Steam Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Build Endless Sky
      run: docker-compose run steam-${{ matrix.arch }}
    - name: Prepare binary
      run: cp build/steam-${{ matrix.arch }}/${{ env.ARTIFACT }} .
    - name: Upload Steam Depot
      uses: actions/upload-artifact@v3
      with:
        name: steam-linux${{ matrix.arch == 'x64' && '64' || '32' }}-depot
        path: ${{ env.ARTIFACT }}


  deploy_steam:
    name: Deploy Steam
    needs: [build_steam_linux, windows_win32, windows_win64, dmg_macos]
    runs-on: ubuntu-latest
    # environment: steam
    env:
      data: data-depot
      linux32: steam-linux-x86
      linux64: steam-linux-x64
      win32: steam-win32
      win64: steam-win64
      macos: steam-macos
      ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v3
    - name: Download credits.txt
      uses: actions/download-artifact@v3
      with:
        name: credits.txt
    - name: Upload Steam Depot
      uses: actions/upload-artifact@v3
      with:
        name: steam-data-depot
        path: |
          changelog
          copyright
          credits.txt
          icon.png
          keys.txt
          license.txt
          data/
          images/
          sounds/
    # - uses: game-ci/steam-deploy@v1
    #   with:
    #     appId: 404410
    #     buildDescription: canary-${{ github.sha }}
    #     username: ${{ secrets.STEAM_DEPLOY_UN }}
    #     password: ${{ secrets.STEAM_DEPLOY_PW }}
    #     configVdf: ${{ secrets.STEAM_DEPLOY_VDF }}
    #     ssfnFileName: ${{ secrets.STEAM_DEPLOY_SSFN_NAME }}
    #     ssfnFileContents: ${{ secrets.STEAM_DEPLOY_SSFN }}
    #     rootPath: ''
    #     depot1Path: ${{ env.data }}
    #     depot3Path: ${{ env.win32 }}
    #     depot4Path: ${{ env.win64 }}
    #     depot5Path: ${{ env.macos }}
    #     depot6Path: ${{ env.linux32 }}
    #     depot7Path: ${{ env.linux64 }}
    #     releaseBranch: canary
